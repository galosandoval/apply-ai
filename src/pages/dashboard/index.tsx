import Head from "next/head"
import { api } from "~/utils/api"
import { type Message, useChat } from "ai/react"
import { useUser } from "~/utils/useUser"
import { useEffect, type FormEvent } from "react"

export default function Dashboard() {
  const { id } = useUser()

  const { data } = api.profile.read.useQuery(
    { userId: id },
    {
      enabled: !!id
    }
  )

  // interface PdfRequestBody {
  //   resumeId: string
  // }

  // const handleDownloadPdf = async () => {
  //   const requestBody: PdfRequestBody = { resumeId }

  //   try {
  //     const response = await fetch("/api/resume/pdf", {
  //       method: "POST",
  //       headers: {
  //         "Content-Type": "application/json"
  //       },
  //       body: JSON.stringify(requestBody)
  //     })

  //     const blob = await response.blob()

  //     const link = document.createElement("a")
  //     link.href = window.URL.createObjectURL(blob)
  //     link.download = `your-file-name.pdf`
  //     link.click()
  //   } catch (error) {
  //     console.error(error)
  //   }
  // }

  const { messages, input, handleInputChange, handleSubmit, isLoading } =
    useChat({
      api: "/api/resume/chat",
      body: data
        ? {
            skill: data?.skills?.join(", "),
            experience: JSON.stringify(data.experience),
            education: JSON.stringify(data.education),
            interests: data.interests,
            profession: data.profession
          }
        : {}
    })

  const onSubmit = (e: FormEvent<HTMLFormElement>) => {
    handleSubmit(e)
  }

  useEffect(() => {
    console.log(messages)
  }, [messages])
  return (
    <>
      <Head>
        <title>GPT Job</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        {messages.map((m) => (
          <ChatMessage
            profileId={data?.id ?? ""}
            key={m.id}
            message={m}
            isLoading={isLoading}
          />
        ))}

        <form onSubmit={onSubmit}>
          <label>
            Paste job description here
            <input value={input} onChange={handleInputChange} />
          </label>
        </form>
      </div>
    </>
  )
}

function ChatMessage({
  message,
  profileId,
  isLoading
}: {
  message: Message
  profileId: string
  isLoading: boolean
}) {
  if (message.role === "user") {
    return null
  }

  if (message.role === "assistant") {
    return (
      <AssistantMessage
        profileId={profileId}
        isLoading={isLoading}
        content={message.content}
      />
    )
  }

  return <p className="whitespace-pre-line">{message.content}</p>
}

function AssistantMessage({
  content,
  isLoading,
  profileId
}: {
  content: string
  isLoading: boolean
  profileId: string
}) {
  const { mutate } = api.resume.create.useMutation()

  if (isLoading) {
    return <p className="whitespace-pre-line">{content}</p>
  }

  const parsed = JSON.parse(content) as FinishedParsed

  console.log(parsed.skills)

  const handleSaveAsResume = () => {
    mutate({
      education: parsed.education,
      experience: parsed.experience,
      skills: parsed.skills,
      interests: parsed.interests,
      introduction: parsed.summary,
      profession: parsed.profession,
      profileId
    })
  }

  return (
    <div className="flex flex-col gap-4">
      <h1 className="label">Education</h1>
      {parsed.education.map((s) => (
        <div className="" key={s.description}>
          <div className="flex flex-col gap-4">
            <div className="label">
              <span className="label-text">School Name</span>
              <div className="rounded-sm px-2 py-1">{s.schoolName}</div>
            </div>

            <div className="">
              <span className="label">Description</span>
              <div className="rounded-sm px-2 py-1">{s.description}</div>
            </div>

            <div className="flex justify-around">
              <div className="text-center">
                <span className="label-text">Start Date</span>
                <div className="rounded-sm px-2 py-1">{s.startDate}</div>
              </div>
              <div className="">
                <span className="label-text">End Date</span>
                <div className="rounded-sm px-2 py-1">{s.endDate}</div>
              </div>
            </div>

            <div className="">
              <div className="">{s.startDate}</div>
              <div className="">{s.endDate}</div>

              <div className="">{s.degree}</div>
              <div className="">{s.gpa}</div>
              {/* <div className="">{s.keyAchievements}</div> */}
            </div>
          </div>
        </div>
      ))}

      <h1 className="">Experience</h1>
      {parsed.experience.map((s) => (
        <div className="" key={s.description}>
          <div className="">
            <div className="label">
              <span className="label-text">Company Name</span>
              <div className="rounded-sm px-2 py-1">{s.companyName}</div>
            </div>

            <div className="">{s.description}</div>

            <div className="">
              <div className="">{s.startDate}</div>
              <div className="">{s.endDate}</div>

              <div className="">{s.title}</div>
              {/* <div className="">{s.keyAchievements}</div> */}
            </div>
          </div>
        </div>
      ))}

      {parsed.skills?.length && (
        <div className="">
          <h1>Skills</h1>

          {parsed.skills.map((skill) => (
            <p key={skill}>{skill}</p>
          ))}
        </div>
      )}

      {parsed.interests && (
        <div className="">
          <h1>Interests</h1>
          <p>{parsed.interests}</p>
        </div>
      )}

      {parsed.summary && (
        <div className="">
          <h1>About Me</h1>
          <p>{parsed.summary}</p>
        </div>
      )}

      {parsed.profession && (
        <div className="">
          <h1>Profession</h1>
          <p>{parsed.profession}</p>
        </div>
      )}

      <div className="">
        <button onClick={handleSaveAsResume} className="btn btn-primary">
          Save
        </button>
      </div>
    </div>
  )
}

type EducationParsed = {
  description: string
  schoolName: string
  startDate: string
  endDate: string
  degree: string
  gpa: string
  // keyAchievements: string[]
}

type SkillParsed = string[]

type ExperienceParsed = {
  companyName: string
  startDate: string
  endDate: string
  description: string
  title: string
  // keyAchievements: string[]
}

type InterestsParsed = string[]

type FinishedParsed = {
  education: EducationParsed[]
  skills: SkillParsed
  experience: ExperienceParsed[]
  interests: InterestsParsed
  summary: string
  profession: string
}
